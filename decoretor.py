# Define a classe ResultadoPVP para armazenar resultados da avalia√ß√£o P/VP
class ResultadoPVP:
    # Construtor que inicializa os atributos do resultado da avalia√ß√£o P/VP
    def __init__(self, classificacao, faixa, descricao, definicao, agrupador, formula, riscos, referencia_cruzada):
        # Atribui a classifica√ß√£o (ex.: "√ìtimo", "Cr√≠tico") √† vari√°vel de inst√¢ncia
        self.classificacao = classificacao
        # Atribui a faixa de P/VP (ex.: "0 <= P/VP <= 1") √† vari√°vel de inst√¢ncia
        self.faixa = faixa
        # Atribui a descri√ß√£o, removendo espa√ßos em branco no in√≠cio/fim
        self.descricao = descricao.strip()
        # Atribui a defini√ß√£o do P/VP, removendo espa√ßos em branco
        self.definicao = definicao.strip()
        # Atribui a categoria de agrupamento (ex.: "Valuation")
        self.agrupador = agrupador
        # Atribui a f√≥rmula do P/VP
        self.formula = formula
        # Atribui os riscos, removendo espa√ßos em branco
        self.riscos = riscos.strip()
        # Atribui as refer√™ncias cruzadas, removendo espa√ßos em branco
        self.referencia_cruzada = referencia_cruzada.strip()

    # Define a representa√ß√£o em string do objeto para depura√ß√£o/impress√£o
    def __repr__(self):
        # Retorna string formatada com classifica√ß√£o e faixa
        return f"<ResultadoPVP: {self.classificacao} | Faixa: {self.faixa}>"

    # Converte o objeto em dicion√°rio para serializa√ß√£o
    def to_dict(self):
        # Retorna dicion√°rio com todos os atributos da inst√¢ncia
        return {
            'classificacao': self.classificacao,
            'faixa': self.faixa,
            'descricao': self.descricao,
            'definicao': self.definicao,
            'agrupador': self.agrupador,
            'formula': self.formula,
            'riscos': self.riscos,
            'referencia_cruzada': self.referencia_cruzada
        }

# Define a classe PVPEvaluator para avaliar √≠ndices P/VP
class PVPEvaluator:
    # Construtor que inicializa defini√ß√£o, agrupador e f√≥rmula do P/VP
    def __init__(self):
        # Define string multilinha explicando o √≠ndice P/VP
        self.definicao = '''
        O Pre√ßo/Valor Patrimonial (P/VP) compara o pre√ßo da a√ß√£o ao valor patrimonial por a√ß√£o, calculado
        como (Pre√ßo da A√ß√£o / Valor Patrimonial por A√ß√£o). √â um indicador de valuation que avalia se a
        a√ß√£o est√° cara ou barata em rela√ß√£o aos ativos l√≠quidos da empresa. Um P/VP baixo sugere
        subvaloriza√ß√£o, enquanto um valor alto indica sobrevaloriza√ß√£o ou expectativas de crescimento.
        '''
        # Define a categoria de agrupamento como "Valuation"
        self.agrupador = 'Valuation'
        # Define a f√≥rmula do P/VP
        self.formula = 'P/VP = Pre√ßo da A√ß√£o / Valor Patrimonial por A√ß√£o'

    # Decorator para validar que os par√¢metros s√£o strings n√£o vazias
    def validar_strings(funcao):
        def wrapper(self, classificacao, faixa, descricao, riscos, referencia):
            # Verifica se cada par√¢metro √© uma string n√£o vazia
            for param, nome in [
                (classificacao, "classificacao"),
                (faixa, "faixa"),
                (descricao, "descricao"),
                (riscos, "riscos"),
                (referencia, "referencia")
            ]:
                if not isinstance(param, str) or not param.strip():
                    raise ValueError(f"O par√¢metro '{nome}' deve ser uma string n√£o vazia.")
            # Chama a fun√ß√£o original com os par√¢metros validados
            return funcao(self, classificacao, faixa, descricao, riscos, referencia)
        return wrapper

    # Cria objeto ResultadoPVP com os par√¢metros fornecidos
    @validar_strings
    def gerar_resultado(self, classificacao, faixa, descricao, riscos, referencia):
        # Instancia e retorna ResultadoPVP com atributos da inst√¢ncia
        return ResultadoPVP(
            classificacao=classificacao,
            faixa=faixa,
            descricao=descricao,
            definicao=self.definicao,
            agrupador=self.agrupador,
            formula=self.formula,
            riscos=riscos,
            referencia_cruzada=referencia
        )

    # Avalia o valor P/VP e retorna um objeto ResultadoPVP
    def avaliar(self, p_vp):
        # Tenta processar o valor P/VP
        try:
            # Converte o P/VP para float para garantir que √© num√©rico
            p_vp = float(p_vp)
            # Verifica se P/VP √© negativo, indicando problemas cr√≠ticos
            if p_vp < 0:
                # Retorna ResultadoPVP para P/VP negativo
                return self.gerar_resultado(
                    classificacao='Cr√≠tico',
                    faixa='P/VP < 0',
                    descricao='Valor negativo pode indicar distor√ß√µes cont√°beis ou preju√≠zos acumulados.',
                    riscos='Alta probabilidade de fal√™ncia ou dilui√ß√£o acion√°ria em reestrutura√ß√µes.',
                    referencia='Avalie evaluate_debt_to_equity para sa√∫de financeira, evaluate_cash_flow para gera√ß√£o de caixa e evaluate_peg_ratio para perspectivas de crescimento.'
                )
            # Verifica se P/VP est√° entre 0 e 1, indicando subvaloriza√ß√£o
            elif 0 <= p_vp <= 1:
                # Retorna ResultadoPVP para a√ß√£o subvalorizada
                return self.gerar_resultado(
                    classificacao='√ìtimo',
                    faixa='0 <= P/VP <= 1',
                    descricao='A a√ß√£o est√° sendo negociada abaixo do valor patrimonial.',
                    riscos='Patrim√¥nio pode incluir ativos obsoletos.',
                    referencia='Analise evaluate_vpa para valor patrimonial e evaluate_roe para rentabilidade.'
                )
            # Verifica se P/VP est√° entre 1 e 1.5, indicando valuation moderada
            elif 1 < p_vp <= 1.5:
                # Retorna ResultadoPVP para valuation moderada
                return self.gerar_resultado(
                    classificacao='Moderado',
                    faixa='1 < P/VP <= 1.5',
                    descricao='Pre√ßo pr√≥ximo ao valor patrimonial, com leve pr√™mio.',
                    riscos='Estagna√ß√£o em setores maduros.',
                    referencia='Compare com evaluate_p_l para lucros e evaluate_pl_ativos para estrutura.'
                )
            # Verifica se P/VP est√° entre 1.5 e 2, indicando sobrevaloriza√ß√£o
            elif 1.5 < p_vp <= 2:
                # Retorna ResultadoPVP para a√ß√£o sobrevalorizada
                return self.gerar_resultado(
                    classificacao='Ruim',
                    faixa='1.5 < P/VP <= 2',
                    descricao='Pre√ßo elevado em rela√ß√£o ao patrim√¥nio.',
                    riscos='Expectativas n√£o realizadas podem levar a corre√ß√µes.',
                    referencia='Verifique evaluate_peg_ratio para crescimento e evaluate_evebitda para valuation.'
                )
            # Verifica se P/VP est√° entre 2 e 3, indicando alta sobrevaloriza√ß√£o
            elif 2 < p_vp <= 3:
                # Retorna ResultadoPVP para a√ß√£o muito sobrevalorizada
                return self.gerar_resultado(
                    classificacao='P√©ssimo',
                    faixa='2 < P/VP <= 3',
                    descricao='Pre√ßo muito acima do valor patrimonial.',
                    riscos='Sensibilidade a mudan√ßas econ√¥micas.',
                    referencia='Combine com evaluate_psr para receita e evaluate_margem_liquida para efici√™ncia.'
                )
            # Verifica se P/VP excede 3, indicando sobrevaloriza√ß√£o extrema
            elif p_vp > 3:
                # Retorna ResultadoPVP para a√ß√£o extremamente sobrevalorizada
                return self.gerar_resultado(
                    classificacao='Fora da faixa',
                    faixa='P/VP > 3',
                    descricao='Pre√ßo extremamente elevado em rela√ß√£o ao patrim√¥nio.',
                    riscos='Bolhas especulativas.',
                    referencia='Avalie evaluate_p_ativo para ativos e evaluate_crescimento_receita para tend√™ncias.'
                )
        # Captura exce√ß√µes para entradas inv√°lidas (ex.: n√£o num√©ricas)
        except Exception as e:
            # Retorna ResultadoPVP com mensagem de erro
            return self._erro(mensagem=str(e))

    # Trata erros criando um ResultadoPVP de erro
    def _erro(self, mensagem):
        # Retorna ResultadoPVP com detalhes de erro
        return ResultadoPVP(
            classificacao='Erro',
            faixa='N/A',
            descricao=f'''
                Ocorreu um erro ao processar o P/VP: {mensagem}.
                Verifique os dados de entrada e assegure que sejam num√©ricos v√°lidos.
            ''',
            definicao=self.definicao,
            agrupador=self.agrupador,
            formula=self.formula,
            riscos='N/A',
            referencia_cruzada='N/A'
        )

# Exibe os atributos de um ResultadoPVP formatados
def exibir_resultado(resultado):
    # Imprime cabe√ßalho do resultado da avalia√ß√£o
    print("üìä Resultado da Avalia√ß√£o P/VP")
    # Imprime a classifica√ß√£o
    print(f"Classifica√ß√£o: {resultado.classificacao}")
    # Imprime a faixa de P/VP
    print(f"Faixa: {resultado.faixa}")
    # Imprime a descri√ß√£o
    print(f"Descri√ß√£o: {resultado.descricao}")
    # Imprime a defini√ß√£o do P/VP
    print(f"Defini√ß√£o: {resultado.definicao}")
    # Imprime a categoria de agrupamento
    print(f"Agrupador: {resultado.agrupador}")
    # Imprime a f√≥rmula
    print(f"F√≥rmula: {resultado.formula}")
    # Imprime os riscos
    print(f"Riscos: {resultado.riscos}")
    # Imprime as refer√™ncias cruzadas
    print(f"Refer√™ncia Cruzada: {resultado.referencia_cruzada}")
    # Imprime linha separadora
    print("-" * 60)

# Bloco principal para testes
if __name__ == "__main__":
    # Cria inst√¢ncia de PVPEvaluator
    avaliador = PVPEvaluator()

    # Teste 1: Avalia√ß√£o autom√°tica com P/VP = 1.2
    # Avalia o valor P/VP 1.2
    resultado_avaliacao = avaliador.avaliar(1.2)
    # Imprime cabe√ßalho do teste
    print("üîç Teste de avalia√ß√£o autom√°tica:")
    # Imprime o objeto ResultadoPVP
    print(resultado_avaliacao)
    # Imprime a representa√ß√£o em dicion√°rio
    print(resultado_avaliacao.to_dict())
    # Imprime linha em branco
    print()

    # Teste 2: Gera√ß√£o manual de resultado
    # Gera ResultadoPVP com entradas manuais
    resultado_manual = avaliador.gerar_resultado(
        classificacao='Teste',
        faixa='1.0 - 2.0',
        descricao='Exemplo de uso externo',
        riscos='Risco moderado',
        referencia='Refer√™ncia fict√≠cia'
    )
    # Imprime cabe√ßalho do teste
    print("üß™ Teste de gera√ß√£o manual de resultado:")
    # Imprime o objeto ResultadoPVP
    print(resultado_manual)
    # Imprime a representa√ß√£o em dicion√°rio
    print(resultado_manual.to_dict())
    # Imprime linha em branco
    print()

    # Teste 3: Simula√ß√£o de erro
    # Avalia entrada inv√°lida para disparar erro
    resultado_erro = avaliador.avaliar("valor_invalido")
    # Imprime cabe√ßalho do teste
    print("‚ö†Ô∏è Teste de erro:")
    # Imprime o ResultadoPVP de erro
    print(resultado_erro)
    # Imprime a representa√ß√£o em dicion√°rio
    print(resultado_erro.to_dict())
    # Imprime linha em branco
    print()

    # Teste adicional: Exibi√ß√£o formatada
    # Define valor de teste P/VP
    valor_pvp = 1.2
    # Avalia o valor P/VP
    resultado = avaliador.avaliar(valor_pvp)
    # Exibe resultado formatado
    exibir_resultado(resultado)
    # Imprime cabe√ßalho do dicion√°rio
    print("üì¶ Resultado como dicion√°rio:")
    # Converte resultado em dicion√°rio e imprime
    print(resultado.to_dict())